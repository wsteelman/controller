/* Copyright (C) 2013-2016 by Jacob Alexander
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#pragma once

// ----- Includes -----

// Compiler Includes
#include <stdint.h>

// Local Includes
#include <buildvars.h> // Defines USB Parameters, partially generated by CMake



// ----- Defines -----

// Max size of key buffer needed for NKRO
// Boot mode uses only the first 6 bytes
#define USB_NKRO_BITFIELD_SIZE_KEYS 27
#define USB_BOOT_MAX_KEYS 6



// ----- Enumerations -----


// ----- Variables -----

// Variables used to communciate to the output module

// ----- Functions -----

void uart_Output_setup();
void uart_Output_send();
void uart_Output_flushBuffers();

uint8_t uart_Output_available();
uint8_t uart_Output_keys_sent();
void uart_Output_reset_buffers();


void uart_Output_firmwareReload();
void uart_Output_softReset();

// Relies on USB serial module
unsigned int uart_Output_availablechar();

// Returns the total mA available (total, if used in a chain, each device will have to use a slice of it)
unsigned int uart_Output_current_available();

void uart_Output_update_external_current( unsigned int current );
void uart_Output_update_usb_current( unsigned int current );

int uart_Output_getchar();
int uart_Output_putchar( char c );
int uart_Output_putstr( char* str );

// ----- Capabilities -----

// Set Boot Keyboard Protocol
void uart_Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args );

// Set NKRO Keyboard Protocol
void uart_Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args );

// Toggle Keyboard Protocol
void uart_Output_toggleKbdProtocol_capability( uint8_t state, uint8_t stateType, uint8_t *args );

// Sends a Consumer Control code to the USB Output buffer
void uart_Output_consCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args );

// Ignores the given key status update
// Used to prevent fall-through, this is the None keyword in KLL
void uart_Output_noneSend_capability( uint8_t state, uint8_t stateType, uint8_t *args );

// Sends a System Control code to the USB Output buffer
void uart_Output_sysCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args );

// Adds a single USB Code to the USB Output buffer
// Argument #1: USB Code
void uart_Output_usbCodeSend_capability( uint8_t state, uint8_t stateType, uint8_t *args );

void uart_Output_flashMode_capability( uint8_t state, uint8_t stateType, uint8_t *args );

#if enableMouse_define == 1
// Sends a mouse command over the USB Output buffer
// XXX This function *will* be changing in the future
//     If you use it, be prepared that your .kll files will break in the future (post KLL 0.5)
// Argument #1: USB Mouse Button (16 bit)
// Argument #2: USB X Axis (16 bit) relative
// Argument #3: USB Y Axis (16 bit) relative
void uart_Output_usbMouse_capability( uint8_t state, uint8_t stateType, uint8_t *args );
#endif




